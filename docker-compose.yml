# Docker Compose for Financial Wisdom Platform

services:
  # API Gateway (Nginx)
  nginx:
    image: nginx:alpine
    container_name: financial-wisdom-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - financial-wisdom-network

  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: financial-wisdom-api
    environment:
      - DB_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - AI_ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AI_OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - financial-wisdom-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Background Workers
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: financial-wisdom-worker
    environment:
      - DB_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - AI_ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AI_OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - financial-wisdom-network

  # Celery Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: financial-wisdom-scheduler
    command: celery -A app.workers.celery beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DB_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - financial-wisdom-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: financial-wisdom-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-financial_wisdom}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - financial-wisdom-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-financial_wisdom}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: financial-wisdom-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - financial-wisdom-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: financial-wisdom-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    networks:
      - financial-wisdom-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend (Optional - for admin dashboard)
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: financial-wisdom-web
    ports:
      - "3000:80"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - financial-wisdom-network
    profiles:
      - web

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: financial-wisdom-prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - financial-wisdom-network
    profiles:
      - monitoring

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: financial-wisdom-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - financial-wisdom-network
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
networks:
  financial-wisdom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16