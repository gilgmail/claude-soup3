#!/usr/bin/env python3
"""
Test Notion integration for Financial Wisdom Platform
Validates the complete Notion service implementation
"""

import os
import sys
import asyncio
import uuid
from datetime import datetime
from typing import List

# Add the app directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.models.domain import (
    Article, ArticleId, Topic, DataSource, Content, QualityMetrics,
    ArticleStatus, ContentStyle, SourceType
)
from app.services.notion_service import NotionService
from app.core.config import settings

class NotionIntegrationTester:
    """Test suite for Notion integration"""
    
    def __init__(self):
        self.notion_service = None
        self.test_results = []
        self.test_data = {}
    
    async def setup(self):
        """Setup test environment"""
        print("üîß Setting up test environment...")
        
        # Check required environment variables
        required_vars = [
            'NOTION_TOKEN',
            'NOTION_ARTICLES_DB_ID',
            'NOTION_TOPICS_DB_ID'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ùå Missing environment variables: {', '.join(missing_vars)}")
            print("Please run create_notion_databases.py first")
            return False
        
        try:
            self.notion_service = NotionService()
            print("‚úÖ Notion service initialized")
            return True
        except Exception as e:
            print(f"‚ùå Failed to initialize Notion service: {e}")
            return False
    
    def log_test(self, test_name: str, success: bool, message: str = ""):
        """Log test result"""
        status = "‚úÖ" if success else "‚ùå"
        print(f"   {status} {test_name}: {message}")
        self.test_results.append({
            "test": test_name,
            "success": success,
            "message": message
        })
    
    async def test_topic_operations(self):
        """Test topic creation and retrieval"""
        print("\nüß™ Testing Topic Operations...")
        
        try:
            # Create test topic
            test_topic = Topic(
                keywords=["AIÊäïË≥á", "‰∫∫Â∑•Êô∫ËÉΩ", "ÁßëÊäÄËÇ°Á•®"],
                category="ÊäïË≥áÁêÜË≤°",
                trend_score=8.5,
                context={"test": True, "created_by": "test_suite"}
            )
            
            topic_page_id = await self.notion_service.create_topic(test_topic)
            self.test_data["topic_page_id"] = topic_page_id
            self.log_test("Create Topic", True, f"Page ID: {topic_page_id}")
            
            # Test topic retrieval
            trending_topics = await self.notion_service.get_trending_topics(limit=5)
            self.log_test(
                "Get Trending Topics", 
                len(trending_topics) > 0,
                f"Retrieved {len(trending_topics)} topics"
            )
            
        except Exception as e:
            self.log_test("Topic Operations", False, str(e))
    
    async def test_article_operations(self):
        """Test article creation, retrieval, and updates"""
        print("\nüß™ Testing Article Operations...")
        
        try:
            # Create test article content
            test_content = Content(
                title="AI ÊäïË≥áÈù©ÂëΩÔºö‰∫∫Â∑•Êô∫ËÉΩÂ¶Ç‰ΩïÊîπËÆäÊäïË≥áÁ≠ñÁï•",
                introduction="‰∫∫Â∑•Êô∫ËÉΩÊ≠£Âú®ÂæπÂ∫ïÊîπËÆäÊäïË≥áÈ†òÂüüÔºåÂæûÈáèÂåñ‰∫§ÊòìÂà∞È¢®Èö™Ë©ï‰º∞ÔºåAIÊäÄË°ìÁÇ∫ÊäïË≥áËÄÖÂ∏∂‰æÜÂâçÊâÄÊú™ÊúâÁöÑÊ©üÈÅá„ÄÇ",
                main_content="""
                ## AIÂú®ÊäïË≥áÈ†òÂüüÁöÑÊáâÁî®
                
                ‰∫∫Â∑•Êô∫ËÉΩÂú®ÊäïË≥áÈ†òÂüüÁöÑÊáâÁî®Ë∂ä‰æÜË∂äÂª£Ê≥õÔºå‰∏ªË¶ÅÈ´îÁèæÂú®‰ª•‰∏ãÂπæÂÄãÊñπÈù¢Ôºö
                
                ### 1. ÈáèÂåñ‰∫§Êòì
                - È´òÈ†ª‰∫§ÊòìÁÆóÊ≥ï
                - Â∏ÇÂ†¥Ë∂®Âã¢È†êÊ∏¨
                - È¢®Èö™ÊéßÂà∂Ê®°Âûã
                
                ### 2. ÊäïË≥áÁµÑÂêàÂÑ™Âåñ
                - Ë≥áÁî¢ÈÖçÁΩÆÂª∫Ë≠∞
                - È¢®Èö™ÂàÜÊï£Á≠ñÁï•
                - ÂãïÊÖãË™øÊï¥Ê©üÂà∂
                
                ### 3. Â∏ÇÂ†¥ÂàÜÊûê
                - ÊÉÖÁ∑íÂàÜÊûê
                - Êñ∞ËÅûÂΩ±ÈüøË©ï‰º∞
                - ÊäÄË°ìÊåáÊ®ôÂàÜÊûê
                """,
                conclusion="AIÊäÄË°ìÁÇ∫ÊäïË≥áËÄÖÊèê‰æõ‰∫ÜÊõ¥Á≤æÊ∫ñÁöÑÂàÜÊûêÂ∑•ÂÖ∑ÂíåÊ±∫Á≠ñÊîØÊåÅÔºå‰ΩÜ‰ªçÈúÄË¶Å‰∫∫Â∑•Êô∫ÊÖßÁöÑÂà§Êñ∑ÂíåÈ¢®Èö™ÊÑèË≠ò„ÄÇ",
                key_insights=[
                    "AIÈáèÂåñ‰∫§ÊòìÂèØ‰ª•ËôïÁêÜÂ§ßÈáèÊï∏ÊìöÔºåÁôºÁèæ‰∫∫È°ûÈõ£‰ª•ÂØüË¶∫ÁöÑÂ∏ÇÂ†¥Ê®°Âºè",
                    "ÊäïË≥áÁµÑÂêàÂÑ™ÂåñÈÄöÈÅéAIÂèØ‰ª•ÂØ¶ÁèæÊõ¥Á≤æÁ¢∫ÁöÑÈ¢®Èö™ÊéßÂà∂",
                    "ÊÉÖÁ∑íÂàÜÊûêËÉΩÂπ´Âä©È†êÊ∏¨Â∏ÇÂ†¥Áü≠ÊúüÊ≥¢Âãï"
                ],
                actionable_steps=[
                    "‰∫ÜËß£‰∏çÂêåAIÊäïË≥áÂπ≥Âè∞ÁöÑÁâπÈªûÂíåË≤ªÁî®ÁµêÊßã",
                    "Â≠∏ÁøíÂü∫Êú¨ÁöÑÈáèÂåñÂàÜÊûêÊ¶ÇÂøµÂíåÊåáÊ®ô",
                    "Âª∫Á´ãÈÅ©ÂêàËá™Â∑±ÁöÑAIËºîÂä©ÊäïË≥áÁ≠ñÁï•",
                    "ÂÆöÊúüË©ï‰º∞ÂíåË™øÊï¥AIÂ∑•ÂÖ∑ÁöÑË°®Áèæ"
                ]
            )
            
            # Create test quality metrics
            test_quality = QualityMetrics(
                readability_score=8.5,
                engagement_score=9.0,
                educational_value=8.8,
                actionability_score=8.2,
                originality_score=8.7
            )
            
            # Create test topic
            test_topic = Topic(
                keywords=["AIÊäïË≥á", "‰∫∫Â∑•Êô∫ËÉΩ", "ÈáèÂåñ‰∫§Êòì"],
                category="ÊäïË≥áÁêÜË≤°",
                trend_score=9.2
            )
            
            # Create test article
            test_article = Article(
                id=ArticleId(),
                topic=test_topic,
                content=test_content,
                sources=[],
                status=ArticleStatus.GENERATED,
                style=ContentStyle.PRACTICAL_WISDOM,
                quality_metrics=test_quality
            )
            
            # Test article creation
            article_page_id = await self.notion_service.create_article(test_article)
            self.test_data["article_page_id"] = article_page_id
            self.test_data["article_id"] = test_article.id
            self.log_test("Create Article", True, f"Page ID: {article_page_id}")
            
            # Test article retrieval
            retrieved_article = await self.notion_service.get_article(test_article.id)
            self.log_test(
                "Get Article", 
                retrieved_article is not None,
                f"Retrieved article: {retrieved_article.id.value if retrieved_article else 'None'}"
            )
            
            # Test article list
            articles = await self.notion_service.list_articles(limit=5)
            self.log_test(
                "List Articles",
                len(articles) > 0,
                f"Retrieved {len(articles)} articles"
            )
            
            # Test status update
            await self.notion_service.update_article_status(
                test_article.id,
                ArticleStatus.APPROVED
            )
            self.log_test("Update Article Status", True, "Updated to APPROVED")
            
        except Exception as e:
            self.log_test("Article Operations", False, str(e))
    
    async def test_search_and_filtering(self):
        """Test search and filtering capabilities"""
        print("\nüß™ Testing Search and Filtering...")
        
        try:
            # Test filtering by status
            approved_articles = await self.notion_service.list_articles(
                status=ArticleStatus.APPROVED,
                limit=10
            )
            self.log_test(
                "Filter by Status",
                True,
                f"Found {len(approved_articles)} approved articles"
            )
            
            # Test filtering by category
            investment_articles = await self.notion_service.list_articles(
                category="ÊäïË≥áÁêÜË≤°",
                limit=10
            )
            self.log_test(
                "Filter by Category",
                True,
                f"Found {len(investment_articles)} investment articles"
            )
            
        except Exception as e:
            self.log_test("Search and Filtering", False, str(e))
    
    async def test_performance(self):
        """Test basic performance characteristics"""
        print("\nüß™ Testing Performance...")
        
        try:
            import time
            
            # Test article list performance
            start_time = time.time()
            articles = await self.notion_service.list_articles(limit=50)
            end_time = time.time()
            
            duration = end_time - start_time
            self.log_test(
                "List Performance",
                duration < 5.0,  # Should complete within 5 seconds
                f"Listed {len(articles)} articles in {duration:.2f}s"
            )
            
            # Test topic retrieval performance
            start_time = time.time()
            topics = await self.notion_service.get_trending_topics(limit=20)
            end_time = time.time()
            
            duration = end_time - start_time
            self.log_test(
                "Topics Performance",
                duration < 3.0,  # Should complete within 3 seconds
                f"Retrieved {len(topics)} topics in {duration:.2f}s"
            )
            
        except Exception as e:
            self.log_test("Performance Tests", False, str(e))
    
    async def test_error_handling(self):
        """Test error handling scenarios"""
        print("\nüß™ Testing Error Handling...")
        
        try:
            # Test getting non-existent article
            fake_id = ArticleId.from_string(str(uuid.uuid4()))
            non_existent = await self.notion_service.get_article(fake_id)
            self.log_test(
                "Non-existent Article",
                non_existent is None,
                "Correctly returned None for non-existent article"
            )
            
            # Test invalid status update
            try:
                await self.notion_service.update_article_status(
                    fake_id,
                    ArticleStatus.PUBLISHED
                )
                self.log_test("Invalid Status Update", False, "Should have raised ValueError")
            except ValueError:
                self.log_test("Invalid Status Update", True, "Correctly raised ValueError")
            
        except Exception as e:
            self.log_test("Error Handling", False, str(e))
    
    def cleanup_test_data(self):
        """Clean up test data (optional)"""
        print("\nüßπ Cleaning up test data...")
        # Note: Notion API doesn't provide delete functionality
        # Test data will remain in the database
        print("   ‚ÑπÔ∏è  Test data remains in Notion (API limitation)")
    
    def print_summary(self):
        """Print test summary"""
        print("\n" + "="*60)
        print("üìä Test Summary")
        print("="*60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        
        print(f"Total Tests: {total_tests}")
        print(f"‚úÖ Passed: {passed_tests}")
        print(f"‚ùå Failed: {failed_tests}")
        print(f"Success Rate: {(passed_tests/total_tests*100):.1f}%")
        
        if failed_tests > 0:
            print("\n‚ùå Failed Tests:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"   ‚Ä¢ {result['test']}: {result['message']}")
        
        if passed_tests == total_tests:
            print("\nüéâ All tests passed! Notion integration is working correctly.")
        else:
            print(f"\n‚ö†Ô∏è  {failed_tests} test(s) failed. Please check the configuration.")
        
        # Print test data info
        if self.test_data:
            print("\nüìù Created Test Data:")
            for key, value in self.test_data.items():
                if isinstance(value, ArticleId):
                    print(f"   {key}: {value.value}")
                else:
                    print(f"   {key}: {value}")

async def main():
    """Main test function"""
    print("üß™ Notion Integration Test Suite")
    print("="*60)
    
    tester = NotionIntegrationTester()
    
    # Setup
    if not await tester.setup():
        return
    
    # Run all tests
    await tester.test_topic_operations()
    await tester.test_article_operations()
    await tester.test_search_and_filtering()
    await tester.test_performance()
    await tester.test_error_handling()
    
    # Cleanup and summary
    tester.cleanup_test_data()
    tester.print_summary()

if __name__ == "__main__":
    asyncio.run(main())